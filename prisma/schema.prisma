generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String? @unique
  password String?
  bio      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tweets    Tweet[]
  likes     Like[]
  comments  Comment[]
  chatRooms ChatRoom[]
  messages  Message[]
}

model Tweet {
  id          Int     @id @default(autoincrement())
  tweet       String
  photo       String?
  photoWidth  Int?
  photoHeight Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  likes    Like[]
  comments Comment[]
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  Int
  tweetId Int

  @@id(name: "id", [userId, tweetId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  Int
  tweetId Int
}

model ChatRoom {
  id       String    @id @default(cuid())
  users    User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
